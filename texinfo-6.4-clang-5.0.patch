--- texinfo-6.4/gnulib/lib/intprops.h.0002~	2017-05-14 13:11:31.000000000 +0200
+++ texinfo-6.4/gnulib/lib/intprops.h	2017-06-26 14:01:27.984018112 +0200
@@ -233,9 +233,15 @@
    __builtin_add_overflow_p (a, b, (__typeof__ ((a) + (b))) 0)
 # define _GL_SUBTRACT_OVERFLOW(a, b, min, max)                          \
    __builtin_sub_overflow_p (a, b, (__typeof__ ((a) - (b))) 0)
+#ifndef __clang__
 # define _GL_MULTIPLY_OVERFLOW(a, b, min, max)                          \
    __builtin_mul_overflow_p (a, b, (__typeof__ ((a) * (b))) 0)
 #else
+# define _GL_MULTIPLY_OVERFLOW(a, b, min, max)                           \
+   (((min) == 0 && (((a) < 0 && 0 < (b)) || ((b) < 0 && 0 < (a))))       \
+    || INT_MULTIPLY_RANGE_OVERFLOW (a, b, min, max))
+#endif
+#else
 # define _GL_ADD_OVERFLOW(a, b, min, max)                                \
    ((min) < 0 ? INT_ADD_RANGE_OVERFLOW (a, b, min, max)                  \
     : (a) < 0 ? (b) <= (a) + (b)                                         \
--- texinfo-6.4/gnulib/lib/xalloc-oversized.h.0002~	2017-04-15 09:19:47.000000000 +0200
+++ texinfo-6.4/gnulib/lib/xalloc-oversized.h	2017-06-26 14:02:06.104133441 +0200
@@ -41,10 +41,10 @@ typedef size_t __xalloc_count_type;
    positive and N must be nonnegative.  This is a macro, not a
    function, so that it works correctly even when SIZE_MAX < N.  */
 
-#if 7 <= __GNUC__
+#if 7 <= __GNUC__ && !defined(__clang__)
 # define xalloc_oversized(n, s) \
    __builtin_mul_overflow_p (n, s, (__xalloc_count_type) 1)
-#elif 5 <= __GNUC__ && !__STRICT_ANSI__
+#elif 5 <= __GNUC__ && !__STRICT_ANSI__ && !defined(__clang__) /* clang doesn't have __builtin_mul_overflow */
 # define xalloc_oversized(n, s) \
    (__builtin_constant_p (n) && __builtin_constant_p (s) \
     ? __xalloc_oversized (n, s) \
