diff -up texinfo-6.5/gnulib/lib/intprops.h.omv~ texinfo-6.5/gnulib/lib/intprops.h
--- texinfo-6.5/gnulib/lib/intprops.h.omv~	2018-04-06 11:34:41.170950796 +0200
+++ texinfo-6.5/gnulib/lib/intprops.h	2018-04-06 11:35:09.080018296 +0200
@@ -226,7 +226,7 @@
 #endif
 
 /* True if __builtin_add_overflow_p (A, B, C) works.  */
-#define _GL_HAS_BUILTIN_OVERFLOW_P (7 <= __GNUC__)
+#define _GL_HAS_BUILTIN_OVERFLOW_P __has_builtin(__builtin_mul_overflow_p)
 
 /* The _GL*_OVERFLOW macros have the same restrictions as the
    *_RANGE_OVERFLOW macros, except that they do not assume that operands
diff -up texinfo-6.5/gnulib/lib/xalloc-oversized.h.omv~ texinfo-6.5/gnulib/lib/xalloc-oversized.h
--- texinfo-6.5/gnulib/lib/xalloc-oversized.h.omv~	2018-04-06 11:35:14.563031623 +0200
+++ texinfo-6.5/gnulib/lib/xalloc-oversized.h	2018-04-06 11:35:34.000079036 +0200
@@ -41,7 +41,7 @@ typedef size_t __xalloc_count_type;
    positive and N must be nonnegative.  This is a macro, not a
    function, so that it works correctly even when SIZE_MAX < N.  */
 
-#if 7 <= __GNUC__
+#if __has_builtin(__builtin_mul_overflow_p)
 # define xalloc_oversized(n, s) \
    __builtin_mul_overflow_p (n, s, (__xalloc_count_type) 1)
 #elif 5 <= __GNUC__ && !defined __ICC && !__STRICT_ANSI__
